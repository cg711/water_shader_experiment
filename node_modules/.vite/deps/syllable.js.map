{
  "version": 3,
  "sources": ["../../pluralize/pluralize.js", "../../normalize-strings/charmap.json", "../../normalize-strings/index.js", "../../syllable/index.js", "../../syllable/problematic.js"],
  "sourcesContent": ["/* global define */\n\n(function (root, pluralize) {\n  /* istanbul ignore else */\n  if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {\n    // Node.\n    module.exports = pluralize();\n  } else if (typeof define === 'function' && define.amd) {\n    // AMD, registers as an anonymous module.\n    define(function () {\n      return pluralize();\n    });\n  } else {\n    // Browser global.\n    root.pluralize = pluralize();\n  }\n})(this, function () {\n  // Rule storage - pluralize and singularize need to be run sequentially,\n  // while other rules can be optimized using an object for instant lookups.\n  var pluralRules = [];\n  var singularRules = [];\n  var uncountables = {};\n  var irregularPlurals = {};\n  var irregularSingles = {};\n\n  /**\n   * Sanitize a pluralization rule to a usable regular expression.\n   *\n   * @param  {(RegExp|string)} rule\n   * @return {RegExp}\n   */\n  function sanitizeRule (rule) {\n    if (typeof rule === 'string') {\n      return new RegExp('^' + rule + '$', 'i');\n    }\n\n    return rule;\n  }\n\n  /**\n   * Pass in a word token to produce a function that can replicate the case on\n   * another word.\n   *\n   * @param  {string}   word\n   * @param  {string}   token\n   * @return {Function}\n   */\n  function restoreCase (word, token) {\n    // Tokens are an exact match.\n    if (word === token) return token;\n\n    // Lower cased words. E.g. \"hello\".\n    if (word === word.toLowerCase()) return token.toLowerCase();\n\n    // Upper cased words. E.g. \"WHISKY\".\n    if (word === word.toUpperCase()) return token.toUpperCase();\n\n    // Title cased words. E.g. \"Title\".\n    if (word[0] === word[0].toUpperCase()) {\n      return token.charAt(0).toUpperCase() + token.substr(1).toLowerCase();\n    }\n\n    // Lower cased words. E.g. \"test\".\n    return token.toLowerCase();\n  }\n\n  /**\n   * Interpolate a regexp string.\n   *\n   * @param  {string} str\n   * @param  {Array}  args\n   * @return {string}\n   */\n  function interpolate (str, args) {\n    return str.replace(/\\$(\\d{1,2})/g, function (match, index) {\n      return args[index] || '';\n    });\n  }\n\n  /**\n   * Replace a word using a rule.\n   *\n   * @param  {string} word\n   * @param  {Array}  rule\n   * @return {string}\n   */\n  function replace (word, rule) {\n    return word.replace(rule[0], function (match, index) {\n      var result = interpolate(rule[1], arguments);\n\n      if (match === '') {\n        return restoreCase(word[index - 1], result);\n      }\n\n      return restoreCase(match, result);\n    });\n  }\n\n  /**\n   * Sanitize a word by passing in the word and sanitization rules.\n   *\n   * @param  {string}   token\n   * @param  {string}   word\n   * @param  {Array}    rules\n   * @return {string}\n   */\n  function sanitizeWord (token, word, rules) {\n    // Empty string or doesn't need fixing.\n    if (!token.length || uncountables.hasOwnProperty(token)) {\n      return word;\n    }\n\n    var len = rules.length;\n\n    // Iterate over the sanitization rules and use the first one to match.\n    while (len--) {\n      var rule = rules[len];\n\n      if (rule[0].test(word)) return replace(word, rule);\n    }\n\n    return word;\n  }\n\n  /**\n   * Replace a word with the updated word.\n   *\n   * @param  {Object}   replaceMap\n   * @param  {Object}   keepMap\n   * @param  {Array}    rules\n   * @return {Function}\n   */\n  function replaceWord (replaceMap, keepMap, rules) {\n    return function (word) {\n      // Get the correct token and case restoration functions.\n      var token = word.toLowerCase();\n\n      // Check against the keep object map.\n      if (keepMap.hasOwnProperty(token)) {\n        return restoreCase(word, token);\n      }\n\n      // Check against the replacement map for a direct word replacement.\n      if (replaceMap.hasOwnProperty(token)) {\n        return restoreCase(word, replaceMap[token]);\n      }\n\n      // Run all the rules against the word.\n      return sanitizeWord(token, word, rules);\n    };\n  }\n\n  /**\n   * Check if a word is part of the map.\n   */\n  function checkWord (replaceMap, keepMap, rules, bool) {\n    return function (word) {\n      var token = word.toLowerCase();\n\n      if (keepMap.hasOwnProperty(token)) return true;\n      if (replaceMap.hasOwnProperty(token)) return false;\n\n      return sanitizeWord(token, token, rules) === token;\n    };\n  }\n\n  /**\n   * Pluralize or singularize a word based on the passed in count.\n   *\n   * @param  {string}  word      The word to pluralize\n   * @param  {number}  count     How many of the word exist\n   * @param  {boolean} inclusive Whether to prefix with the number (e.g. 3 ducks)\n   * @return {string}\n   */\n  function pluralize (word, count, inclusive) {\n    var pluralized = count === 1\n      ? pluralize.singular(word) : pluralize.plural(word);\n\n    return (inclusive ? count + ' ' : '') + pluralized;\n  }\n\n  /**\n   * Pluralize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.plural = replaceWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Check if a word is plural.\n   *\n   * @type {Function}\n   */\n  pluralize.isPlural = checkWord(\n    irregularSingles, irregularPlurals, pluralRules\n  );\n\n  /**\n   * Singularize a word.\n   *\n   * @type {Function}\n   */\n  pluralize.singular = replaceWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Check if a word is singular.\n   *\n   * @type {Function}\n   */\n  pluralize.isSingular = checkWord(\n    irregularPlurals, irregularSingles, singularRules\n  );\n\n  /**\n   * Add a pluralization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addPluralRule = function (rule, replacement) {\n    pluralRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add a singularization rule to the collection.\n   *\n   * @param {(string|RegExp)} rule\n   * @param {string}          replacement\n   */\n  pluralize.addSingularRule = function (rule, replacement) {\n    singularRules.push([sanitizeRule(rule), replacement]);\n  };\n\n  /**\n   * Add an uncountable word rule.\n   *\n   * @param {(string|RegExp)} word\n   */\n  pluralize.addUncountableRule = function (word) {\n    if (typeof word === 'string') {\n      uncountables[word.toLowerCase()] = true;\n      return;\n    }\n\n    // Set singular and plural references for the word.\n    pluralize.addPluralRule(word, '$0');\n    pluralize.addSingularRule(word, '$0');\n  };\n\n  /**\n   * Add an irregular word definition.\n   *\n   * @param {string} single\n   * @param {string} plural\n   */\n  pluralize.addIrregularRule = function (single, plural) {\n    plural = plural.toLowerCase();\n    single = single.toLowerCase();\n\n    irregularSingles[single] = plural;\n    irregularPlurals[plural] = single;\n  };\n\n  /**\n   * Irregular rules.\n   */\n  [\n    // Pronouns.\n    ['I', 'we'],\n    ['me', 'us'],\n    ['he', 'they'],\n    ['she', 'they'],\n    ['them', 'them'],\n    ['myself', 'ourselves'],\n    ['yourself', 'yourselves'],\n    ['itself', 'themselves'],\n    ['herself', 'themselves'],\n    ['himself', 'themselves'],\n    ['themself', 'themselves'],\n    ['is', 'are'],\n    ['was', 'were'],\n    ['has', 'have'],\n    ['this', 'these'],\n    ['that', 'those'],\n    // Words ending in with a consonant and `o`.\n    ['echo', 'echoes'],\n    ['dingo', 'dingoes'],\n    ['volcano', 'volcanoes'],\n    ['tornado', 'tornadoes'],\n    ['torpedo', 'torpedoes'],\n    // Ends with `us`.\n    ['genus', 'genera'],\n    ['viscus', 'viscera'],\n    // Ends with `ma`.\n    ['stigma', 'stigmata'],\n    ['stoma', 'stomata'],\n    ['dogma', 'dogmata'],\n    ['lemma', 'lemmata'],\n    ['schema', 'schemata'],\n    ['anathema', 'anathemata'],\n    // Other irregular rules.\n    ['ox', 'oxen'],\n    ['axe', 'axes'],\n    ['die', 'dice'],\n    ['yes', 'yeses'],\n    ['foot', 'feet'],\n    ['eave', 'eaves'],\n    ['goose', 'geese'],\n    ['tooth', 'teeth'],\n    ['quiz', 'quizzes'],\n    ['human', 'humans'],\n    ['proof', 'proofs'],\n    ['carve', 'carves'],\n    ['valve', 'valves'],\n    ['looey', 'looies'],\n    ['thief', 'thieves'],\n    ['groove', 'grooves'],\n    ['pickaxe', 'pickaxes'],\n    ['passerby', 'passersby']\n  ].forEach(function (rule) {\n    return pluralize.addIrregularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Pluralization rules.\n   */\n  [\n    [/s?$/i, 's'],\n    [/[^\\u0000-\\u007F]$/i, '$0'],\n    [/([^aeiou]ese)$/i, '$1'],\n    [/(ax|test)is$/i, '$1es'],\n    [/(alias|[^aou]us|t[lm]as|gas|ris)$/i, '$1es'],\n    [/(e[mn]u)s?$/i, '$1s'],\n    [/([^l]ias|[aeiou]las|[ejzr]as|[iu]am)$/i, '$1'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1i'],\n    [/(alumn|alg|vertebr)(?:a|ae)$/i, '$1ae'],\n    [/(seraph|cherub)(?:im)?$/i, '$1im'],\n    [/(her|at|gr)o$/i, '$1oes'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|automat|quor)(?:a|um)$/i, '$1a'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)(?:a|on)$/i, '$1a'],\n    [/sis$/i, 'ses'],\n    [/(?:(kni|wi|li)fe|(ar|l|ea|eo|oa|hoo)f)$/i, '$1$2ves'],\n    [/([^aeiouy]|qu)y$/i, '$1ies'],\n    [/([^ch][ieo][ln])ey$/i, '$1ies'],\n    [/(x|ch|ss|sh|zz)$/i, '$1es'],\n    [/(matr|cod|mur|sil|vert|ind|append)(?:ix|ex)$/i, '$1ices'],\n    [/\\b((?:tit)?m|l)(?:ice|ouse)$/i, '$1ice'],\n    [/(pe)(?:rson|ople)$/i, '$1ople'],\n    [/(child)(?:ren)?$/i, '$1ren'],\n    [/eaux$/i, '$0'],\n    [/m[ae]n$/i, 'men'],\n    ['thou', 'you']\n  ].forEach(function (rule) {\n    return pluralize.addPluralRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Singularization rules.\n   */\n  [\n    [/s$/i, ''],\n    [/(ss)$/i, '$1'],\n    [/(wi|kni|(?:after|half|high|low|mid|non|night|[^\\w]|^)li)ves$/i, '$1fe'],\n    [/(ar|(?:wo|[ae])l|[eo][ao])ves$/i, '$1f'],\n    [/ies$/i, 'y'],\n    [/\\b([pl]|zomb|(?:neck|cross)?t|coll|faer|food|gen|goon|group|lass|talk|goal|cut)ies$/i, '$1ie'],\n    [/\\b(mon|smil)ies$/i, '$1ey'],\n    [/\\b((?:tit)?m|l)ice$/i, '$1ouse'],\n    [/(seraph|cherub)im$/i, '$1'],\n    [/(x|ch|ss|sh|zz|tto|go|cho|alias|[^aou]us|t[lm]as|gas|(?:her|at|gr)o|[aeiou]ris)(?:es)?$/i, '$1'],\n    [/(analy|diagno|parenthe|progno|synop|the|empha|cri|ne)(?:sis|ses)$/i, '$1sis'],\n    [/(movie|twelve|abuse|e[mn]u)s$/i, '$1'],\n    [/(test)(?:is|es)$/i, '$1is'],\n    [/(alumn|syllab|vir|radi|nucle|fung|cact|stimul|termin|bacill|foc|uter|loc|strat)(?:us|i)$/i, '$1us'],\n    [/(agend|addend|millenni|dat|extrem|bacteri|desiderat|strat|candelabr|errat|ov|symposi|curricul|quor)a$/i, '$1um'],\n    [/(apheli|hyperbat|periheli|asyndet|noumen|phenomen|criteri|organ|prolegomen|hedr|automat)a$/i, '$1on'],\n    [/(alumn|alg|vertebr)ae$/i, '$1a'],\n    [/(cod|mur|sil|vert|ind)ices$/i, '$1ex'],\n    [/(matr|append)ices$/i, '$1ix'],\n    [/(pe)(rson|ople)$/i, '$1rson'],\n    [/(child)ren$/i, '$1'],\n    [/(eau)x?$/i, '$1'],\n    [/men$/i, 'man']\n  ].forEach(function (rule) {\n    return pluralize.addSingularRule(rule[0], rule[1]);\n  });\n\n  /**\n   * Uncountable rules.\n   */\n  [\n    // Singular words with no plurals.\n    'adulthood',\n    'advice',\n    'agenda',\n    'aid',\n    'aircraft',\n    'alcohol',\n    'ammo',\n    'analytics',\n    'anime',\n    'athletics',\n    'audio',\n    'bison',\n    'blood',\n    'bream',\n    'buffalo',\n    'butter',\n    'carp',\n    'cash',\n    'chassis',\n    'chess',\n    'clothing',\n    'cod',\n    'commerce',\n    'cooperation',\n    'corps',\n    'debris',\n    'diabetes',\n    'digestion',\n    'elk',\n    'energy',\n    'equipment',\n    'excretion',\n    'expertise',\n    'firmware',\n    'flounder',\n    'fun',\n    'gallows',\n    'garbage',\n    'graffiti',\n    'hardware',\n    'headquarters',\n    'health',\n    'herpes',\n    'highjinks',\n    'homework',\n    'housework',\n    'information',\n    'jeans',\n    'justice',\n    'kudos',\n    'labour',\n    'literature',\n    'machinery',\n    'mackerel',\n    'mail',\n    'media',\n    'mews',\n    'moose',\n    'music',\n    'mud',\n    'manga',\n    'news',\n    'only',\n    'personnel',\n    'pike',\n    'plankton',\n    'pliers',\n    'police',\n    'pollution',\n    'premises',\n    'rain',\n    'research',\n    'rice',\n    'salmon',\n    'scissors',\n    'series',\n    'sewage',\n    'shambles',\n    'shrimp',\n    'software',\n    'species',\n    'staff',\n    'swine',\n    'tennis',\n    'traffic',\n    'transportation',\n    'trout',\n    'tuna',\n    'wealth',\n    'welfare',\n    'whiting',\n    'wildebeest',\n    'wildlife',\n    'you',\n    /pok[eé]mon$/i,\n    // Regexes.\n    /[^aeiou]ese$/i, // \"chinese\", \"japanese\"\n    /deer$/i, // \"deer\", \"reindeer\"\n    /fish$/i, // \"fish\", \"blowfish\", \"angelfish\"\n    /measles$/i,\n    /o[iu]s$/i, // \"carnivorous\"\n    /pox$/i, // \"chickpox\", \"smallpox\"\n    /sheep$/i\n  ].forEach(pluralize.addUncountableRule);\n\n  return pluralize;\n});\n", "{\"105\":\"i\",\"192\":\"A\",\"193\":\"A\",\"194\":\"A\",\"195\":\"A\",\"196\":\"A\",\"197\":\"A\",\"199\":\"C\",\"200\":\"E\",\"201\":\"E\",\"202\":\"E\",\"203\":\"E\",\"204\":\"I\",\"205\":\"I\",\"206\":\"I\",\"207\":\"I\",\"209\":\"N\",\"210\":\"O\",\"211\":\"O\",\"212\":\"O\",\"213\":\"O\",\"214\":\"O\",\"216\":\"O\",\"217\":\"U\",\"218\":\"U\",\"219\":\"U\",\"220\":\"U\",\"221\":\"Y\",\"224\":\"a\",\"225\":\"a\",\"226\":\"a\",\"227\":\"a\",\"228\":\"a\",\"229\":\"a\",\"231\":\"c\",\"232\":\"e\",\"233\":\"e\",\"234\":\"e\",\"235\":\"e\",\"236\":\"i\",\"237\":\"i\",\"238\":\"i\",\"239\":\"i\",\"241\":\"n\",\"242\":\"o\",\"243\":\"o\",\"244\":\"o\",\"245\":\"o\",\"246\":\"o\",\"248\":\"o\",\"249\":\"u\",\"250\":\"u\",\"251\":\"u\",\"252\":\"u\",\"253\":\"y\",\"255\":\"y\",\"256\":\"A\",\"257\":\"a\",\"258\":\"A\",\"259\":\"a\",\"260\":\"A\",\"261\":\"a\",\"262\":\"C\",\"263\":\"c\",\"264\":\"C\",\"265\":\"c\",\"266\":\"C\",\"267\":\"c\",\"268\":\"C\",\"269\":\"c\",\"270\":\"D\",\"271\":\"d\",\"272\":\"D\",\"273\":\"d\",\"274\":\"E\",\"275\":\"e\",\"276\":\"E\",\"277\":\"e\",\"278\":\"E\",\"279\":\"e\",\"280\":\"E\",\"281\":\"e\",\"282\":\"E\",\"283\":\"e\",\"284\":\"G\",\"285\":\"g\",\"286\":\"G\",\"287\":\"g\",\"288\":\"G\",\"289\":\"g\",\"290\":\"G\",\"291\":\"g\",\"292\":\"H\",\"293\":\"h\",\"294\":\"H\",\"295\":\"h\",\"296\":\"I\",\"297\":\"i\",\"298\":\"I\",\"299\":\"i\",\"300\":\"I\",\"301\":\"i\",\"302\":\"I\",\"303\":\"i\",\"304\":\"I\",\"308\":\"J\",\"309\":\"j\",\"310\":\"K\",\"311\":\"k\",\"313\":\"L\",\"314\":\"l\",\"315\":\"L\",\"316\":\"l\",\"317\":\"L\",\"318\":\"l\",\"319\":\"L\",\"320\":\"l\",\"321\":\"L\",\"322\":\"l\",\"323\":\"N\",\"324\":\"n\",\"325\":\"N\",\"326\":\"n\",\"327\":\"N\",\"328\":\"n\",\"332\":\"O\",\"333\":\"o\",\"334\":\"O\",\"335\":\"o\",\"336\":\"O\",\"337\":\"o\",\"338\":\"O\",\"339\":\"o\",\"340\":\"R\",\"341\":\"r\",\"342\":\"R\",\"343\":\"r\",\"344\":\"R\",\"345\":\"r\",\"346\":\"S\",\"347\":\"s\",\"348\":\"S\",\"349\":\"s\",\"350\":\"S\",\"351\":\"s\",\"352\":\"S\",\"353\":\"s\",\"354\":\"T\",\"355\":\"t\",\"356\":\"T\",\"357\":\"t\",\"358\":\"T\",\"359\":\"t\",\"360\":\"U\",\"361\":\"u\",\"362\":\"U\",\"363\":\"u\",\"364\":\"U\",\"365\":\"u\",\"366\":\"U\",\"367\":\"u\",\"368\":\"U\",\"369\":\"u\",\"370\":\"U\",\"371\":\"u\",\"372\":\"W\",\"373\":\"w\",\"374\":\"Y\",\"375\":\"y\",\"376\":\"Y\",\"377\":\"Z\",\"378\":\"z\",\"379\":\"Z\",\"380\":\"z\",\"381\":\"Z\",\"382\":\"z\",\"384\":\"b\",\"385\":\"B\",\"386\":\"B\",\"387\":\"b\",\"390\":\"O\",\"391\":\"C\",\"392\":\"c\",\"393\":\"D\",\"394\":\"D\",\"395\":\"D\",\"396\":\"d\",\"398\":\"E\",\"400\":\"E\",\"401\":\"F\",\"402\":\"f\",\"403\":\"G\",\"407\":\"I\",\"408\":\"K\",\"409\":\"k\",\"410\":\"l\",\"412\":\"M\",\"413\":\"N\",\"414\":\"n\",\"415\":\"O\",\"416\":\"O\",\"417\":\"o\",\"420\":\"P\",\"421\":\"p\",\"422\":\"R\",\"427\":\"t\",\"428\":\"T\",\"429\":\"t\",\"430\":\"T\",\"431\":\"U\",\"432\":\"u\",\"434\":\"V\",\"435\":\"Y\",\"436\":\"y\",\"437\":\"Z\",\"438\":\"z\",\"461\":\"A\",\"462\":\"a\",\"463\":\"I\",\"464\":\"i\",\"465\":\"O\",\"466\":\"o\",\"467\":\"U\",\"468\":\"u\",\"477\":\"e\",\"484\":\"G\",\"485\":\"g\",\"486\":\"G\",\"487\":\"g\",\"488\":\"K\",\"489\":\"k\",\"490\":\"O\",\"491\":\"o\",\"500\":\"G\",\"501\":\"g\",\"504\":\"N\",\"505\":\"n\",\"512\":\"A\",\"513\":\"a\",\"514\":\"A\",\"515\":\"a\",\"516\":\"E\",\"517\":\"e\",\"518\":\"E\",\"519\":\"e\",\"520\":\"I\",\"521\":\"i\",\"522\":\"I\",\"523\":\"i\",\"524\":\"O\",\"525\":\"o\",\"526\":\"O\",\"527\":\"o\",\"528\":\"R\",\"529\":\"r\",\"530\":\"R\",\"531\":\"r\",\"532\":\"U\",\"533\":\"u\",\"534\":\"U\",\"535\":\"u\",\"536\":\"S\",\"537\":\"s\",\"538\":\"T\",\"539\":\"t\",\"542\":\"H\",\"543\":\"h\",\"544\":\"N\",\"545\":\"d\",\"548\":\"Z\",\"549\":\"z\",\"550\":\"A\",\"551\":\"a\",\"552\":\"E\",\"553\":\"e\",\"558\":\"O\",\"559\":\"o\",\"562\":\"Y\",\"563\":\"y\",\"564\":\"l\",\"565\":\"n\",\"566\":\"t\",\"567\":\"j\",\"570\":\"A\",\"571\":\"C\",\"572\":\"c\",\"573\":\"L\",\"574\":\"T\",\"575\":\"s\",\"576\":\"z\",\"579\":\"B\",\"580\":\"U\",\"581\":\"V\",\"582\":\"E\",\"583\":\"e\",\"584\":\"J\",\"585\":\"j\",\"586\":\"Q\",\"587\":\"q\",\"588\":\"R\",\"589\":\"r\",\"590\":\"Y\",\"591\":\"y\",\"592\":\"a\",\"593\":\"a\",\"595\":\"b\",\"596\":\"o\",\"597\":\"c\",\"598\":\"d\",\"599\":\"d\",\"600\":\"e\",\"603\":\"e\",\"604\":\"e\",\"605\":\"e\",\"606\":\"e\",\"607\":\"j\",\"608\":\"g\",\"609\":\"g\",\"610\":\"g\",\"613\":\"h\",\"614\":\"h\",\"616\":\"i\",\"618\":\"i\",\"619\":\"l\",\"620\":\"l\",\"621\":\"l\",\"623\":\"m\",\"624\":\"m\",\"625\":\"m\",\"626\":\"n\",\"627\":\"n\",\"628\":\"n\",\"629\":\"o\",\"633\":\"r\",\"634\":\"r\",\"635\":\"r\",\"636\":\"r\",\"637\":\"r\",\"638\":\"r\",\"639\":\"r\",\"640\":\"r\",\"641\":\"r\",\"642\":\"s\",\"647\":\"t\",\"648\":\"t\",\"649\":\"u\",\"651\":\"v\",\"652\":\"v\",\"653\":\"w\",\"654\":\"y\",\"655\":\"y\",\"656\":\"z\",\"657\":\"z\",\"663\":\"c\",\"665\":\"b\",\"666\":\"e\",\"667\":\"g\",\"668\":\"h\",\"669\":\"j\",\"670\":\"k\",\"671\":\"l\",\"672\":\"q\",\"686\":\"h\",\"688\":\"h\",\"690\":\"j\",\"691\":\"r\",\"692\":\"r\",\"694\":\"r\",\"695\":\"w\",\"696\":\"y\",\"737\":\"l\",\"738\":\"s\",\"739\":\"x\",\"780\":\"v\",\"829\":\"x\",\"851\":\"x\",\"867\":\"a\",\"868\":\"e\",\"869\":\"i\",\"870\":\"o\",\"871\":\"u\",\"872\":\"c\",\"873\":\"d\",\"874\":\"h\",\"875\":\"m\",\"876\":\"r\",\"877\":\"t\",\"878\":\"v\",\"879\":\"x\",\"7424\":\"a\",\"7427\":\"b\",\"7428\":\"c\",\"7429\":\"d\",\"7431\":\"e\",\"7432\":\"e\",\"7433\":\"i\",\"7434\":\"j\",\"7435\":\"k\",\"7436\":\"l\",\"7437\":\"m\",\"7438\":\"n\",\"7439\":\"o\",\"7440\":\"o\",\"7441\":\"o\",\"7442\":\"o\",\"7443\":\"o\",\"7446\":\"o\",\"7447\":\"o\",\"7448\":\"p\",\"7449\":\"r\",\"7450\":\"r\",\"7451\":\"t\",\"7452\":\"u\",\"7453\":\"u\",\"7454\":\"u\",\"7455\":\"m\",\"7456\":\"v\",\"7457\":\"w\",\"7458\":\"z\",\"7522\":\"i\",\"7523\":\"r\",\"7524\":\"u\",\"7525\":\"v\",\"7680\":\"A\",\"7681\":\"a\",\"7682\":\"B\",\"7683\":\"b\",\"7684\":\"B\",\"7685\":\"b\",\"7686\":\"B\",\"7687\":\"b\",\"7690\":\"D\",\"7691\":\"d\",\"7692\":\"D\",\"7693\":\"d\",\"7694\":\"D\",\"7695\":\"d\",\"7696\":\"D\",\"7697\":\"d\",\"7698\":\"D\",\"7699\":\"d\",\"7704\":\"E\",\"7705\":\"e\",\"7706\":\"E\",\"7707\":\"e\",\"7710\":\"F\",\"7711\":\"f\",\"7712\":\"G\",\"7713\":\"g\",\"7714\":\"H\",\"7715\":\"h\",\"7716\":\"H\",\"7717\":\"h\",\"7718\":\"H\",\"7719\":\"h\",\"7720\":\"H\",\"7721\":\"h\",\"7722\":\"H\",\"7723\":\"h\",\"7724\":\"I\",\"7725\":\"i\",\"7728\":\"K\",\"7729\":\"k\",\"7730\":\"K\",\"7731\":\"k\",\"7732\":\"K\",\"7733\":\"k\",\"7734\":\"L\",\"7735\":\"l\",\"7738\":\"L\",\"7739\":\"l\",\"7740\":\"L\",\"7741\":\"l\",\"7742\":\"M\",\"7743\":\"m\",\"7744\":\"M\",\"7745\":\"m\",\"7746\":\"M\",\"7747\":\"m\",\"7748\":\"N\",\"7749\":\"n\",\"7750\":\"N\",\"7751\":\"n\",\"7752\":\"N\",\"7753\":\"n\",\"7754\":\"N\",\"7755\":\"n\",\"7764\":\"P\",\"7765\":\"p\",\"7766\":\"P\",\"7767\":\"p\",\"7768\":\"R\",\"7769\":\"r\",\"7770\":\"R\",\"7771\":\"r\",\"7774\":\"R\",\"7775\":\"r\",\"7776\":\"S\",\"7777\":\"s\",\"7778\":\"S\",\"7779\":\"s\",\"7786\":\"T\",\"7787\":\"t\",\"7788\":\"T\",\"7789\":\"t\",\"7790\":\"T\",\"7791\":\"t\",\"7792\":\"T\",\"7793\":\"t\",\"7794\":\"U\",\"7795\":\"u\",\"7796\":\"U\",\"7797\":\"u\",\"7798\":\"U\",\"7799\":\"u\",\"7804\":\"V\",\"7805\":\"v\",\"7806\":\"V\",\"7807\":\"v\",\"7808\":\"W\",\"7809\":\"w\",\"7810\":\"W\",\"7811\":\"w\",\"7812\":\"W\",\"7813\":\"w\",\"7814\":\"W\",\"7815\":\"w\",\"7816\":\"W\",\"7817\":\"w\",\"7818\":\"X\",\"7819\":\"x\",\"7820\":\"X\",\"7821\":\"x\",\"7822\":\"Y\",\"7823\":\"y\",\"7824\":\"Z\",\"7825\":\"z\",\"7826\":\"Z\",\"7827\":\"z\",\"7828\":\"Z\",\"7829\":\"z\",\"7835\":\"s\",\"7840\":\"A\",\"7841\":\"a\",\"7842\":\"A\",\"7843\":\"a\",\"7864\":\"E\",\"7865\":\"e\",\"7866\":\"E\",\"7867\":\"e\",\"7868\":\"E\",\"7869\":\"e\",\"7880\":\"I\",\"7881\":\"i\",\"7882\":\"I\",\"7883\":\"i\",\"7884\":\"O\",\"7885\":\"o\",\"7886\":\"O\",\"7887\":\"o\",\"7908\":\"U\",\"7909\":\"u\",\"7910\":\"U\",\"7911\":\"u\",\"7922\":\"Y\",\"7923\":\"y\",\"7924\":\"Y\",\"7925\":\"y\",\"7926\":\"Y\",\"7927\":\"y\",\"7928\":\"Y\",\"7929\":\"y\",\"8305\":\"i\",\"8341\":\"h\",\"8342\":\"k\",\"8343\":\"l\",\"8344\":\"m\",\"8345\":\"n\",\"8346\":\"p\",\"8347\":\"s\",\"8348\":\"t\",\"8450\":\"c\",\"8458\":\"g\",\"8459\":\"h\",\"8460\":\"h\",\"8461\":\"h\",\"8464\":\"i\",\"8465\":\"i\",\"8466\":\"l\",\"8467\":\"l\",\"8468\":\"l\",\"8469\":\"n\",\"8472\":\"p\",\"8473\":\"p\",\"8474\":\"q\",\"8475\":\"r\",\"8476\":\"r\",\"8477\":\"r\",\"8484\":\"z\",\"8488\":\"z\",\"8492\":\"b\",\"8493\":\"c\",\"8495\":\"e\",\"8496\":\"e\",\"8497\":\"f\",\"8498\":\"F\",\"8499\":\"m\",\"8500\":\"o\",\"8506\":\"q\",\"8513\":\"g\",\"8514\":\"l\",\"8515\":\"l\",\"8516\":\"y\",\"8517\":\"d\",\"8518\":\"d\",\"8519\":\"e\",\"8520\":\"i\",\"8521\":\"j\",\"8526\":\"f\",\"8579\":\"C\",\"8580\":\"c\",\"8765\":\"s\",\"8766\":\"s\",\"8959\":\"z\",\"8999\":\"x\",\"9746\":\"x\",\"9776\":\"i\",\"9866\":\"i\",\"10005\":\"x\",\"10006\":\"x\",\"10007\":\"x\",\"10008\":\"x\",\"10625\":\"z\",\"10626\":\"z\",\"11362\":\"L\",\"11364\":\"R\",\"11365\":\"a\",\"11366\":\"t\",\"11373\":\"A\",\"11374\":\"M\",\"11375\":\"A\",\"11390\":\"S\",\"11391\":\"Z\",\"19904\":\"i\",\"42893\":\"H\",\"42922\":\"H\",\"42923\":\"E\",\"42924\":\"G\",\"42925\":\"L\",\"42928\":\"K\",\"42929\":\"T\",\"62937\":\"x\"}", "(function(global, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(function() {\n      return factory(global, global.document);\n    });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = factory(global, global.document);\n  } else {\n      global.normalize = factory(global, global.document);\n  }\n} (typeof window !== 'undefined' ? window : this, function (window, document) {\n  var charmap = require('./charmap.json');\n  var regex = null;\n  var current_charmap;\n  var old_charmap;\n\n  function normalize(str, custom_charmap) {\n    old_charmap = current_charmap;\n    current_charmap = custom_charmap || charmap;\n\n    regex = (regex && old_charmap === current_charmap) ? regex : buildRegExp(current_charmap);\n\n    return str.replace(regex, function(charToReplace) {\n      return current_charmap[charToReplace.charCodeAt(0)] || charToReplace;\n    });\n  }\n\n  function buildRegExp(charmap){\n     return new RegExp('[' + Object.keys(charmap).map(function(code) {return String.fromCharCode(code); }).join(' ') + ']', 'g');\n   }\n\n  return normalize;\n}));\n", "import pluralize from 'pluralize'\n// @ts-ignore remove when typed.\nimport normalize from 'normalize-strings'\nimport {problematic} from './problematic.js'\n\nconst own = {}.hasOwnProperty\n\n// Two expressions of occurrences which normally would be counted as two\n// syllables, but should be counted as one.\nconst EXPRESSION_MONOSYLLABIC_ONE = new RegExp(\n  [\n    'awe($|d|so)',\n    'cia(?:l|$)',\n    'tia',\n    'cius',\n    'cious',\n    '[^aeiou]giu',\n    '[aeiouy][^aeiouy]ion',\n    'iou',\n    'sia$',\n    'eous$',\n    '[oa]gue$',\n    '.[^aeiuoycgltdb]{2,}ed$',\n    '.ely$',\n    '^jua',\n    'uai',\n    'eau',\n    '^busi$',\n    '(?:[aeiouy](?:' +\n      [\n        '[bcfgklmnprsvwxyz]',\n        'ch',\n        'dg',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'n[cgn]',\n        'r[bcnsv]',\n        'squ',\n        's[chkls]',\n        'th'\n      ].join('|') +\n      ')ed$)',\n    '(?:[aeiouy](?:' +\n      [\n        '[bdfklmnprstvy]',\n        'ch',\n        'g[hn]',\n        'lch',\n        'l[lv]',\n        'mm',\n        'nch',\n        'nn',\n        'r[nsv]',\n        'squ',\n        's[cklst]',\n        'th'\n      ].join('|') +\n      ')es$)'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_MONOSYLLABIC_TWO = new RegExp(\n  '[aeiouy](?:' +\n    [\n      '[bcdfgklmnprstvyz]',\n      'ch',\n      'dg',\n      'g[hn]',\n      'l[lv]',\n      'mm',\n      'n[cgns]',\n      'r[cnsv]',\n      'squ',\n      's[cklst]',\n      'th'\n    ].join('|') +\n    ')e$',\n  'g'\n)\n\n// Four expression of occurrences which normally would be counted as one\n// syllable, but should be counted as two.\nconst EXPRESSION_DOUBLE_SYLLABIC_ONE = new RegExp(\n  '(?:' +\n    [\n      '([^aeiouy])\\\\1l',\n      '[^aeiouy]ie(?:r|s?t)',\n      '[aeiouym]bl',\n      'eo',\n      'ism',\n      'asm',\n      'thm',\n      'dnt',\n      'snt',\n      'uity',\n      'dea',\n      'gean',\n      'oa',\n      'ua',\n      'react?',\n      'orbed', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n      'shred', // Cancel `'.[^aeiuoycgltdb]{2,}ed$',`\n      'eings?',\n      '[aeiouy]sh?e[rs]'\n    ].join('|') +\n    ')$',\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_TWO = new RegExp(\n  [\n    'creat(?!u)',\n    '[^gq]ua[^auieo]',\n    '[aeiou]{3}',\n    '^(?:ia|mc|coa[dglx].)',\n    '^re(app|es|im|us)',\n    '(th|d)eist'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_THREE = new RegExp(\n  [\n    '[^aeiou]y[ae]',\n    '[^l]lien',\n    'riet',\n    'dien',\n    'iu',\n    'io',\n    'ii',\n    'uen',\n    '[aeilotu]real',\n    'real[aeilotu]',\n    'iell',\n    'eo[^aeiou]',\n    '[aeiou]y[aeiou]'\n  ].join('|'),\n  'g'\n)\n\nconst EXPRESSION_DOUBLE_SYLLABIC_FOUR = /[^s]ia/\n\n// Expression to match single syllable pre- and suffixes.\nconst EXPRESSION_SINGLE = new RegExp(\n  [\n    '^(?:' +\n      [\n        'un',\n        'fore',\n        'ware',\n        'none?',\n        'out',\n        'post',\n        'sub',\n        'pre',\n        'pro',\n        'dis',\n        'side',\n        'some'\n      ].join('|') +\n      ')',\n    '(?:' +\n      [\n        'ly',\n        'less',\n        'some',\n        'ful',\n        'ers?',\n        'ness',\n        'cians?',\n        'ments?',\n        'ettes?',\n        'villes?',\n        'ships?',\n        'sides?',\n        'ports?',\n        'shires?',\n        '[gnst]ion(?:ed|s)?'\n      ].join('|') +\n      ')$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match double syllable pre- and suffixes.\nconst EXPRESSION_DOUBLE = new RegExp(\n  [\n    '^' +\n      '(?:' +\n      [\n        'above',\n        'anti',\n        'ante',\n        'counter',\n        'hyper',\n        'afore',\n        'agri',\n        'infra',\n        'intra',\n        'inter',\n        'over',\n        'semi',\n        'ultra',\n        'under',\n        'extra',\n        'dia',\n        'micro',\n        'mega',\n        'kilo',\n        'pico',\n        'nano',\n        'macro',\n        'somer'\n      ].join('|') +\n      ')',\n    '(?:fully|berry|woman|women|edly|union|((?:[bcdfghjklmnpqrstvwxz])|[aeiou])ye?ing)$'\n  ].join('|'),\n  'g'\n)\n\n// Expression to match triple syllable suffixes.\nconst EXPRESSION_TRIPLE = /(creations?|ology|ologist|onomy|onomist)$/g\n\n/**\n * Count syllables in `value`.\n *\n * @param {string} value\n *   Value to check.\n * @returns {number}\n *   Syllables in `value`.\n */\nexport function syllable(value) {\n  const values = normalize(String(value))\n    .toLowerCase()\n    // Remove apostrophes.\n    .replace(/['’]/g, '')\n    // Split on word boundaries.\n    .split(/\\b/g)\n  let index = -1\n  let sum = 0\n\n  while (++index < values.length) {\n    // Remove non-alphabetic characters from a given value.\n    sum += one(values[index].replace(/[^a-z]/g, ''))\n  }\n\n  return sum\n}\n\n/**\n * Get syllables in a word.\n *\n * @param {string} value\n * @returns {number}\n */\nfunction one(value) {\n  let count = 0\n\n  if (value.length === 0) {\n    return count\n  }\n\n  // Return early when possible.\n  if (value.length < 3) {\n    return 1\n  }\n\n  // If `value` is a hard to count, it might be in `problematic`.\n  if (own.call(problematic, value)) {\n    return problematic[value]\n  }\n\n  // Additionally, the singular word might be in `problematic`.\n  const singular = pluralize(value, 1)\n\n  if (own.call(problematic, singular)) {\n    return problematic[singular]\n  }\n\n  const addOne = returnFactory(1)\n  const subtractOne = returnFactory(-1)\n\n  // Count some prefixes and suffixes, and remove their matched ranges.\n  value = value\n    .replace(EXPRESSION_TRIPLE, countFactory(3))\n    .replace(EXPRESSION_DOUBLE, countFactory(2))\n    .replace(EXPRESSION_SINGLE, countFactory(1))\n\n  // Count multiple consonants.\n  const parts = value.split(/[^aeiouy]+/)\n  let index = -1\n\n  while (++index < parts.length) {\n    if (parts[index] !== '') {\n      count++\n    }\n  }\n\n  // Subtract one for occurrences which should be counted as one (but are\n  // counted as two).\n  value\n    .replace(EXPRESSION_MONOSYLLABIC_ONE, subtractOne)\n    .replace(EXPRESSION_MONOSYLLABIC_TWO, subtractOne)\n\n  // Add one for occurrences which should be counted as two (but are counted as\n  // one).\n  value\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_ONE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_TWO, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_THREE, addOne)\n    .replace(EXPRESSION_DOUBLE_SYLLABIC_FOUR, addOne)\n\n  // Make sure at least on is returned.\n  return count || 1\n\n  /**\n   * Define scoped counters, to be used in `String#replace()` calls.\n   * The scoped counter removes the matched value from the input.\n   *\n   * @param {number} addition\n   */\n  function countFactory(addition) {\n    return counter\n    /**\n     * @returns {string}\n     */\n    function counter() {\n      count += addition\n      return ''\n    }\n  }\n\n  /**\n   * This scoped counter does not remove the matched value from the input.\n   *\n   * @param {number} addition\n   */\n  function returnFactory(addition) {\n    return returner\n    /**\n     * @param {string} $0\n     * @returns {string}\n     */\n    function returner($0) {\n      count += addition\n      return $0\n    }\n  }\n}\n", "/** @type {Record<string, number>} */\nexport const problematic = {\n  abalone: 4,\n  abare: 3,\n  abbruzzese: 4,\n  abed: 2,\n  aborigine: 5,\n  abruzzese: 4,\n  acreage: 3,\n  adame: 3,\n  adieu: 2,\n  adobe: 3,\n  anemone: 4,\n  anyone: 3,\n  apache: 3,\n  aphrodite: 4,\n  apostrophe: 4,\n  ariadne: 4,\n  cafe: 2,\n  calliope: 4,\n  catastrophe: 4,\n  chile: 2,\n  chloe: 2,\n  circe: 2,\n  coyote: 3,\n  daphne: 2,\n  epitome: 4,\n  eurydice: 4,\n  euterpe: 3,\n  every: 2,\n  everywhere: 3,\n  forever: 3,\n  gethsemane: 4,\n  guacamole: 4,\n  hermione: 4,\n  hyperbole: 4,\n  jesse: 2,\n  jukebox: 2,\n  karate: 3,\n  machete: 3,\n  maybe: 2,\n  naive: 2,\n  newlywed: 3,\n  penelope: 4,\n  people: 2,\n  persephone: 4,\n  phoebe: 2,\n  pulse: 1,\n  queue: 1,\n  recipe: 3,\n  riverbed: 3,\n  sesame: 3,\n  shoreline: 2,\n  simile: 3,\n  snuffleupagus: 5,\n  sometimes: 2,\n  syncope: 3,\n  tamale: 3,\n  waterbed: 3,\n  wednesday: 2,\n  yosemite: 4,\n  zoe: 2\n}\n"],
  "mappings": "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",
  "names": ["pluralize", "window", "normalize", "charmap", "normalize", "pluralize"]
}
